class MyHashSet:
    def __init__(self):
        self.size = 1000  # A prime-sized array helps reduce collisions
        self.buckets = [[] for _ in range(self.size)]

    def _hash(self, key):
        return key % self.size

    def add(self, key: int) -> None:
        index = self._hash(key)
        bucket = self.buckets[index]
        if key not in bucket:
            bucket.append(key)

    def remove(self, key: int) -> None:
        index = self._hash(key)
        bucket = self.buckets[index]
        if key in bucket:
            bucket.remove(key)

    def contains(self, key: int) -> bool:
        index = self._hash(key)
        return key in self.buckets[index]
    
hashSet = MyHashSet()
hashSet.add(1)
hashSet.add(2)
print(hashSet.contains(1))  # True
print(hashSet.contains(3))  # False
hashSet.add(2)
print(hashSet.contains(2))  # True
hashSet.remove(2)
print(hashSet.contains(2))  # False
